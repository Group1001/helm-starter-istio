# Default values for <CHARTNAME>.
# This is a YAML-formatted file.

# The overall system your service is a part of
system: <CHARTNAME>
# The name of your service
service: <CHARTNAME>
# The major version number for your service
version: 1

# Docker settings
image:
  # The name of your docker container
  repository: XXXX
  # Your docker container's tag
  tag: YYYY
  imagePullPolicy: IfNotPresent

# Docker settings for db migrations job
migrate:
  enabled: false
  image:
    repository: AAAA
    tag: BBBB

# The number of pod replicas to run for your service
replicaCount: 3

#### CHANGE THIS.  Current services all use unique port numbers
ports:
  - name: http
    port: 8080
    targetPort: 8080

#### CHANGE THIS
# When enabled, configure the Istio ingress gateway to route outside traffic for the provided
# host name to this service on the ports and protocols defined in the 'ports' section 
# above. 
ingressGateway:
  enabled: true
  name: istio-system/ingress-gateway
  host: |-
    *.{{ $.Release.Namespace }}.group1001.cloud
# matchPrefix: 
#   - "/foo"
#   - "/bar"

configMap:
  enabled: false
  # Where the config map should be mounted inside your container's filesystem.
  mountPath: /config/<CHARTNAME>-config
  fileName: config.yaml
  # Everything under content is copied verbatim into your service's configmap.
  content:
    key1: value1
    key2: value2

env:
  inline: 
    - name: DD_ENV
      value: |-
        {{ $.Release.Namespace }}
    - name: DD_PROFILING_ENABLED
      value: "true"
    - name: DD_TAGS
      value: |-
        app:{{ $.Values.service }},env:{{ $.Release.Namespace }},part-of:{{ .Values.system }}
    - name: DD_TRACE_ANALYTICS_ENABLED
      value: "true"
    - name: DD_TRACE_ENABLED
      value: "true"
  downwardApi: 
    - name: DD_AGENT_HOST
      fieldPath: status.hostIP
  configMapRef: 
    enabled: false
    values: {}
  secretRef:
    enabled: false
    values: {}

datadog:
  enabled: true
  #### PICK ONE
  # Aggregate multi-line logs starting with YYYY-MM-DD timestamps
  annotation: |-
    ad.datadoghq.com/{{ $.Values.service }}.logs: |-
              [{
                "source": "{{ $.Values.service }}",
                "service": "{{ $.Values.service }}",
                "log_processing_rules": [{
                  "type": "exclude_at_match",
                  "name": "discard_pings",
                  "pattern": "GET\\s+/(ping|healthz|version|\\w+/version)"
                },
                {
                  "type": "multi_line",
                  "name": "log_start_with_date",
                  "pattern" : "\\d{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])"
                }]
              }]
  # Aggregate multi-lin logs starting with HH:MM:SS clock times
  # annotation: |-
  #   ad.datadoghq.com/${{ $.Values.service }}.logs: |-
  #             [{
  #               "source": "{{ $.Values.service }}",
  #               "service": "{{ $.Values.service }}",
  #               "log_processing_rules": [{
  #                 "type": "exclude_at_match",
  #                 "name": "discard_pings",
  #                 "pattern": "GET\\s+-\\s+/healthz"
  #               },
  #               {
  #                 "type": "multi_line",
  #                 "name": "log_start_with_timestamp",
  #                 "pattern": "(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9].\\d{3}"
  #               }]
  #             }]    

# Probe settings (use Kubernetes syntax)
probes:
  livenessProbe:
    failureThreshold: 3
    httpGet:
      httpHeaders:
      - name: Accept
        value: application/json
      path: /healthz/liveness
      port: 8080
      scheme: HTTP
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 3
    httpGet:
      httpHeaders:
      - name: Accept
        value: application/json
      path: /healthz/readiness
      port: 8080
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
