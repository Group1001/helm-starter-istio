apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ (print .Values.service "-v" .Values.version) | quote }}
  labels:
    app.kubernetes.io/name: {{ .Values.service | quote }}
    app.kubernetes.io/part-of: {{ .Values.system | quote }}
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.service | quote }}
      app.kubernetes.io/version: {{ .Values.version | quote }}
  template:
    metadata:
      labels:
        # Kubernetes recommended labels
        app.kubernetes.io/name: {{ .Values.service | quote }}
        app.kubernetes.io/part-of: {{ .Values.system | quote }}
        app.kubernetes.io/version: {{ .Values.version | quote }}
        # Istio required labels
        app: {{ .Values.service | quote }}
        version: {{ .Values.version | quote }}
      annotations:
        {{- if .Values.datadog.enabled }}
        {{ tpl .Values.datadog.annotation $ }}
        {{- end }}
        {{- if .Values.configMap.enabled }}
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- end }}
    spec:
      containers:
        - name: {{ .Values.service | quote }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.imagePullPolicy | quote }}
          ports:
          {{- range .Values.ports }}
            - name: {{ .name | quote }}
              containerPort: {{ .targetPort }}
              protocol: TCP
          {{- end }}
          {{- if .Values.configMap.enabled }}
          volumeMounts:
            - name: {{ (print .Values.service "-config") | quote }}
              mountPath: {{ .Values.configMap.mountPath | quote }}
          {{- end }}
          {{- if or (.Values.env.inline) (.Values.env.downwardApi) }}
          env:
          {{- range .Values.env.downwardApi }}
            - name: {{ .name }}
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: {{ .fieldPath }}
          {{- end -}}
          {{- range .Values.env.inline }}
            - name: {{ .name }}
              value: {{ tpl .value $ | quote }}
          {{- end -}}
          {{- end }}
          {{- if or (.Values.env.configMapRef.enabled) (.Values.env.secretRef.enabled) }}
          envFrom:
          {{- if .Values.env.configMapRef.enabled }}
            - configMapRef:
                name: {{ .Values.service }}-config
          {{- end -}}
          {{- if .Values.env.secretRef.enabled }}
            - secretRef:
                name: {{ .Values.service }}-secret
          {{- end -}}
          {{- end }}
      {{- if .Values.configMap.enabled }}
      volumes:
        {{- if .Values.configMap.enabled }}
        - name: {{ (print .Values.service "-config") | quote }}
          configMap:
            name: {{ .Values.service | quote }}
        {{- end }}
        {{- end }}
